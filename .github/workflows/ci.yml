 # workflow_dispatch  # Only run manually, disable workflows in .github/workflows/ temporarily with it.

name: CI - CSharp App

on:
  push:
    branches:
      - main
      - develop
      - feature/**
      - hotfix/**
  pull_request:
    branches:
      - main
      - develop

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_HOME: /tmp/dotnet_cli_home
  DOTNET_EnableDiagnostics: false
  NUGET_RETRIES: 3
  NUGET_RETRY_DELAY_MILLISECONDS: 1000
  DOCKER_BUILDKIT: 1

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image-tag: ${{ steps.set-env.outputs.image-tag }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Dynamic Environment
        id: set-env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "image-tag=stable" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "image-tag=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/hotfix/"* ]]; then
            echo "environment=hotfix" >> $GITHUB_OUTPUT
            echo "image-tag=hotfix-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "image-tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Security Tools
        run: |
          # Install git-secrets
          sudo apt-get update && sudo apt-get install -y git-secrets
          git secrets --register-aws || true
          git secrets --install -f || true

      - name: Git Secret Scan
        run: |
          git secrets --scan || (echo "CRITICAL: Secrets found in codebase!" && exit 1)

      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "detect --source=. --verbose --report-format=sarif --report-path=gitleaks-report.sarif"

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'csharp-sample-app'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
          
      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            gitleaks-report.sarif
            reports/
          retention-days: 30

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        dotnet-version: ['6.0.x', '7.0.x', '8.0.x']
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_REPOSITORY: wahbamousa/csharp-sample-app
      SONAR_PROJECT_KEY: csharp-sample-app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Setup .NET Tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global CycloneDX
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-nuget-

      - name: Audit Start
        run: |
          mkdir -p audit
          cat > audit/pipeline-audit.json <<EOF
          {
            "pipeline_id": "${{ github.run_id }}",
            "started_by": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "start_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.setup.outputs.environment }}",
            "dotnet_version": "${{ matrix.dotnet-version }}"
          }
          EOF

      - name: SonarQube Begin
        if: matrix.dotnet-version == '8.0.x' && env.SONAR_TOKEN != ''
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/*Tests*.cs"

      - name: Restore Dependencies
        run: |
          dotnet restore --locked-mode
          dotnet list package --vulnerable --include-transitive || true

      - name: Build
        run: |
          dotnet build --no-restore -c Release \
            -p:TreatWarningsAsErrors=true \
            -p:AnalysisLevel=latest \
            -p:EnforceCodeStyleInBuild=true

      - name: Run Tests with Coverage
        run: |
          dotnet test --no-build --no-restore -c Release \
            --logger "trx;LogFileName=test-results-${{ matrix.dotnet-version }}.trx" \
            --logger "console;verbosity=normal" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --settings tests.runsettings \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./coverage/ \
            /p:Threshold=80 \
            /p:ThresholdType=line \
            /p:ThresholdStat=total

      - name: Generate Coverage Report
        if: success()
        run: |
          reportgenerator \
            -reports:"./coverage/coverage.opencover.xml" \
            -targetdir:"./coverage/report" \
            -reporttypes:"Html;Cobertura;Badges;MarkdownSummary" \
            -historydir:"./coverage/history"

      - name: SonarQube End
        if: matrix.dotnet-version == '8.0.x' && env.SONAR_TOKEN != ''
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: Generate .NET SBOM
        run: |
          mkdir -p sbom
          dotnet CycloneDX . -o sbom/sbom-dotnet-${{ matrix.dotnet-version }}.json -j

      - name: Package Application
        if: matrix.dotnet-version == '8.0.x'
        run: |
          dotnet publish -c Release -o ./publish \
            --no-restore \
            --no-build \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true

      - name: Audit End
        if: always()
        run: |
          jq '. + {
            "end_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "status": "'${{ job.status }}'",
            "duration_seconds": '$(($(date +%s) - $(date -d "$(jq -r .start_time audit/pipeline-audit.json)" +%s)))'
          }' audit/pipeline-audit.json > audit/pipeline-audit-complete.json
          mv audit/pipeline-audit-complete.json audit/pipeline-audit.json

      - name: Upload Build Artifacts
        if: matrix.dotnet-version == '8.0.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: |
            ./publish/
            audit/pipeline-audit.json
            ./coverage/report
            ./TestResults/*.trx
            sbom/*.json
          retention-days: 30

  docker-build:
    name: Docker Build and Scan
    runs-on: ubuntu-latest
    needs: [setup, build-test]
    if: success()
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_REPOSITORY: wahbamousa/csharp-sample-app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: ./artifacts

      - name: Docker Build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ needs.setup.outputs.image-tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            BUILD_ENV=${{ needs.setup.outputs.environment }}

      - name: Scan Docker Image with Trivy
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasecurity/trivy image \
            --severity HIGH,CRITICAL \
            --exit-code 0 \
            --format sarif \
            --output trivy-results.sarif \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}

      - name: Container Structure Test
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/workspace \
            gcr.io/gcp-runtimes/container-structure-test:latest \
            test --image ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} \
            --config /workspace/container-structure-test.yaml || true

      - name: Generate Container SBOM
        run: |
          mkdir -p sbom
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasecurity/trivy image \
            --format cyclonedx \
            --output sbom/sbom-container.json \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}

      - name: Health Check
        run: |
          # Create isolated network
          docker network create test-network-${{ github.run_id }} || true
          
          # Run container with health check
          CONTAINER_ID=$(docker run -d \
            --network test-network-${{ github.run_id }} \
            --name health-check-${{ github.run_id }} \
            --health-cmd "curl -f http://localhost:80/health || exit 1" \
            --health-interval 5s \
            --health-retries 10 \
            --health-timeout 3s \
            --health-start-period 30s \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }})
          
          # Wait for health check with timeout
          TIMEOUT=120
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null || echo "error")
            if [ "$STATUS" = "healthy" ]; then
              echo "✅ Container is healthy"
              docker logs $CONTAINER_ID
              break
            elif [ "$STATUS" = "unhealthy" ]; then
              echo "❌ Container is unhealthy"
              docker logs $CONTAINER_ID
              docker rm -f $CONTAINER_ID || true
              docker network rm test-network-${{ github.run_id }} || true
              exit 1
            fi
            echo "⏳ Waiting for container to be healthy... ($ELAPSED/$TIMEOUT seconds)"
            sleep 5
            ELAPSED=$((ELAPSED + 5))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Health check timeout"
            docker logs $CONTAINER_ID
            docker rm -f $CONTAINER_ID || true
            docker network rm test-network-${{ github.run_id }} || true
            exit 1
          fi
          
          # Performance test
          docker run --rm \
            --network test-network-${{ github.run_id }} \
            williamyeh/wrk \
            -t4 -c10 -d10s \
            http://health-check-${{ github.run_id }}:80/health || true
          
          # Cleanup
          docker rm -f $CONTAINER_ID || true
          docker network rm test-network-${{ github.run_id }} || true

      - name: Push Docker Image
        if: needs.setup.outputs.should-deploy == 'true'
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ needs.setup.outputs.image-tag }}
          
          # Only update latest tag from main branch
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} \
                      ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest
            docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest
          fi

      - name: Sign Docker Image
        if: needs.setup.outputs.should-deploy == 'true' && env.COSIGN_KEY != ''
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          # Install cosign
          curl -Lo cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign
          
          # Sign the image
          ./cosign sign --key env://COSIGN_KEY \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}

      - name: Generate Image Metadata
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} | cut -d'@' -f2)
          
          cat > image-metadata.json <<EOF
          {
            "registry": "${{ env.DOCKER_REGISTRY }}",
            "repository": "${{ env.DOCKER_REPOSITORY }}",
            "tag": "${{ github.sha }}",
            "digest": "${IMAGE_DIGEST}",
            "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.setup.outputs.environment }}",
            "labels": {
              "build_version": "${{ github.sha }}",
              "build_number": "${{ github.run_number }}",
              "build_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOF

      - name: Upload Docker Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-artifacts-${{ github.run_id }}
          path: |
            image-metadata.json
            sbom/sbom-container.json
            trivy-results.sarif
          retention-days: 30

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [setup, docker-build]
    if: needs.setup.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker Artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-artifacts-${{ github.run_id }}
          path: ./artifacts

      - name: Deploy Application
        id: deploy
        run: |
          echo "Deploying to ${{ needs.setup.outputs.environment }}"
          # Add your deployment logic here (kubectl, helm, etc.)
          echo "app-url=https://${{ needs.setup.outputs.environment }}.example.com" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          # Add deployment verification logic
          echo "Verifying deployment at ${{ steps.deploy.outputs.app-url }}"
          # curl -f ${{ steps.deploy.outputs.app-url }}/health

      - name: Update Deployment Status
        if: always()
        run: |
          cat > deployment-status.json <<EOF
          {
            "environment": "${{ needs.setup.outputs.environment }}",
            "status": "${{ job.status }}",
            "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployed_by": "${{ github.actor }}",
            "image_tag": "${{ needs.setup.outputs.image-tag }}",
            "commit_sha": "${{ github.sha }}",
            "app_url": "${{ steps.deploy.outputs.app-url }}"
          }
          EOF

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: deployment-status.json
          retention-days: 30

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [setup, security-scan, build-test, docker-build, deploy]
    if: always()
    steps:
      - name: Aggregate Results
        run: |
          cat > pipeline-summary.json <<EOF
          {
            "pipeline_id": "${{ github.run_id }}",
            "environment": "${{ needs.setup.outputs.environment }}",
            "jobs": {
              "security_scan": "${{ needs.security-scan.result }}",
              "build_test": "${{ needs.build-test.result }}",
              "docker_build": "${{ needs.docker-build.result }}",
              "deploy": "${{ needs.deploy.result }}"
            },
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Slack Notify
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,message
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ contains(needs.*.result, 'failure') && 'danger' || contains(needs.*.result, 'cancelled') && 'warning' || 'good' }}",
                "title": "Pipeline ${{ github.run_id }} - ${{ needs.setup.outputs.environment }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.setup.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Image Tag",
                    "value": "${{ needs.setup.outputs.image-tag }}",
                    "short": true
                  },
                  {
                    "title": "Security Scan",
                    "value": "${{ needs.security-scan.result }}",
                    "short": true
                  },
                  {
                    "title": "Build & Test",
                    "value": "${{ needs.build-test.result }}",
                    "short": true
                  },
                  {
                    "title": "Docker Build",
                    "value": "${{ needs.docker-build.result }}",
                    "short": true
                  },
                  {
                    "title": "Deploy",
                    "value": "${{ needs.deploy.result }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: GitHub Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Pipeline Results 🚀
              
              | Job | Status |
              |-----|--------|
              | Security Scan | ${{ needs.security-scan.result }} |
              | Build & Test | ${{ needs.build-test.result }} |
              | Docker Build | ${{ needs.docker-build.result }} |
              | Deploy | ${{ needs.deploy.result }} |
              
              **Environment**: ${{ needs.setup.outputs.environment }}
              **Image Tag**: ${{ needs.setup.outputs.image-tag }}
              **Run ID**: ${{ github.run_id }}
              `
            })